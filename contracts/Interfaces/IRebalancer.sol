// SPDX-License-Identifier: BSD-2-Clause
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface IRebalancer {
  event Paused(address account);
  event RoleAdminChanged(
    bytes32 indexed role,
    bytes32 indexed previousAdminRole,
    bytes32 indexed newAdminRole
  );
  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
  event Unpaused(address account);

  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

  function REBALANCE_ROLE() external view returns (bytes32);

  function UPToken() external view returns (address);

  function UP_CONTROLLER() external view returns (address);

  function WETH() external view returns (address);

  function _rebalanceWithStrategy() external;

  function allocationLP() external view returns (uint256);

  function allocationRedeem() external view returns (uint256);

  function darbi() external view returns (address);

  function getLiquidityPoolBalance(uint256 reserves0, uint256 reserves1)
    external
    view
    returns (uint256, uint256);

  function getReward(uint256 position) external view returns (IStrategy.Rewards memory);

  function getRewardsLength() external view returns (uint256);

  function getRoleAdmin(bytes32 role) external view returns (bytes32);

  function grantRole(bytes32 role, address account) external;

  function hasRole(bytes32 role, address account) external view returns (bool);

  function liquidityPool() external view returns (address);

  function pause() external;

  function paused() external view returns (bool);

  function rebalance() external;

  function renounceRole(bytes32 role, address account) external;

  function revokeRole(bytes32 role, address account) external;

  function rewards(uint256)
    external
    view
    returns (
      uint256 rewardsAmount,
      uint256 depositedAmount,
      uint256 timestamp
    );

  function setAllocationLP(uint256 _allocationLP) external returns (bool);

  function setAllocationRedeem(uint256 _allocationRedeem) external returns (bool);

  function setDarbi(address newAddress) external;

  function setSlippageTolerance(uint256 _slippageTolerance) external returns (bool);

  function setStrategy(address newAddress) external;

  function setUPController(address newAddress) external;

  function slippageTolerance() external view returns (uint256);

  function strategy() external view returns (address);

  function supportsInterface(bytes4 interfaceId) external view returns (bool);

  function unifiFactory() external view returns (address);

  function unifiRouter() external view returns (address);

  function unpause() external;

  function withdrawFunds() external returns (bool);

  function withdrawFundsERC20(address tokenAddress) external returns (bool);

  receive() external payable;
}

interface IStrategy {
  struct Rewards {
    uint256 rewardsAmount;
    uint256 depositedAmount;
    uint256 timestamp;
  }
}
