// SPDX-License-Identifier: BSD-2-Clause
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface Harmony {
  event Deposit(uint256);
  event Gather();
  event Paused(address account);
  event RoleAdminChanged(
    bytes32 indexed role,
    bytes32 indexed previousAdminRole,
    bytes32 indexed newAdminRole
  );
  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
  event Unpaused(address account);
  event UpdateRebalancer(address rebalancer);
  event UpdateUPController(address upController);
  event UpdateValidator(address targetValidator);
  event Withdraw(uint256);

  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

  function MONITOR_ROLE() external view returns (bytes32);

  function REBALANCER_ROLE() external view returns (bytes32);

  function adjustDelegation() external returns (bool);

  function amountDeposited() external view returns (uint256);

  function amountStaked() external view returns (uint256);

  function checkAllocation() external view returns (uint256);

  function checkRewards() external view returns (IStrategy.Rewards memory);

  function collectRewards() external returns (uint256 result);

  function delegate(address validatorAddress, uint256 amount) external returns (uint256 result);

  function deposit(uint256 depositValue) external payable returns (bool);

  function epoch() external view returns (uint256);

  function epochOfLastRebalance() external view returns (uint256);

  function gather() external;

  function getRoleAdmin(bytes32 role) external view returns (bytes32);

  function grantRole(bytes32 role, address account) external;

  function hasRole(bytes32 role, address account) external view returns (bool);

  function lastAmountDeposited() external view returns (uint256);

  function lastClaimedAmount() external view returns (uint256);

  function paused() external view returns (bool);

  function pendingUndelegation() external view returns (uint256);

  function rebalancer() external view returns (address);

  function renounceRole(bytes32 role, address account) external;

  function revokeRole(bytes32 role, address account) external;

  function rewardsAmount() external view returns (uint256);

  function setRebalancer(address newAddress) external;

  function setUPController(address newAddress) external;

  function setValidator(address newAddress) external;

  function supportsInterface(bytes4 interfaceId) external view returns (bool);

  function targetValidator() external view returns (address);

  function timestampOfLastClaim() external view returns (uint256);

  function undelegate(address validatorAddress, uint256 amount) external returns (uint256 result);

  function upController() external view returns (address);

  function withdraw(uint256 amount) external returns (bool);

  function withdrawAll() external returns (bool);

  function withdrawFunds() external returns (bool);

  function withdrawFundsERC20(address tokenAddress) external returns (bool);

  receive() external payable;
}

interface IStrategy {
  struct Rewards {
    uint256 rewardsAmount;
    uint256 depositedAmount;
    uint256 timestamp;
  }
}
