// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface IAaveStrategy {
  event Deposit(uint256);
  event Gather();
  event Paused(address account);
  event RoleAdminChanged(
    bytes32 indexed role,
    bytes32 indexed previousAdminRole,
    bytes32 indexed newAdminRole
  );
  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
  event Unpaused(address account);
  event UpdateRebalancer(address _rebalancer);
  event Withdraw(uint256);

  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

  function REBALANCER_ROLE() external view returns (bytes32);

  function aaveDataProvider() external view returns (address);

  function aaveDepositToken() external view returns (address);

  function aavePool() external view returns (address);

  function amountDeposited() external view returns (uint256);

  function checkAAVEBalance() external view returns (uint256 aaveBalance);

  function checkAAVEInterest() external view returns (uint256 aaveEarnings);

  function checkRewards() external view returns (IStrategy.Rewards memory);

  function deposit(uint256 depositValue) external payable returns (bool);

  function gather() external;

  function getRoleAdmin(bytes32 role) external view returns (bytes32);

  function grantRole(bytes32 role, address account) external;

  function hasRole(bytes32 role, address account) external view returns (bool);

  function paused() external view returns (bool);

  function renounceRole(bytes32 role, address account) external;

  function revokeRole(bytes32 role, address account) external;

  function supportsInterface(bytes4 interfaceId) external view returns (bool);

  function updateaaveDataProvider(address _aaveDataProvider) external;

  function updateaaveDepositToken(address _aaveDepositToken) external;

  function updateaavePool(address _aavePool) external;

  function updatewethGateway(address _wethGateway) external;

  function wethGateway() external view returns (address);

  function withdraw(uint256 amount) external returns (bool);

  function withdrawAll() external returns (bool);

  function withdrawFunds() external returns (bool);

  function withdrawFundsERC20(address tokenAddress) external returns (bool);

  function wrappedTokenAddress() external view returns (address);

  receive() external payable;
}

interface IStrategy {
  struct Rewards {
    uint256 rewardsAmount;
    uint256 depositedAmount;
    uint256 timestamp;
  }
}
