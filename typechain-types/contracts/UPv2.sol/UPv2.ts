/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface UPv2Interface extends utils.Interface {
  functions: {
    "addMinter(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowNative(uint256)": FunctionFragment;
    "borrowUP(uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "clearNativeDebt(uint256)": FunctionFragment;
    "clearUPDebt(uint256)": FunctionFragment;
    "controllerAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getNativeTotal()": FunctionFragment;
    "getRedeemValue()": FunctionFragment;
    "getTotalFeesGiven()": FunctionFragment;
    "getTotalUPBurnt()": FunctionFragment;
    "getVirtualPrice()": FunctionFragment;
    "getVirtualPriceForMinting(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "justBurn(uint256)": FunctionFragment;
    "justDeposit(uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nativedBorrowed()": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferMulti(address[],uint256[])": FunctionFragment;
    "transferOtherTokens(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upBorrowed()": FunctionFragment;
    "updateControllerAddress(address)": FunctionFragment;
    "updateMintRate(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMinter"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "borrowNative"
      | "borrowUP"
      | "burn"
      | "burnFrom"
      | "clearNativeDebt"
      | "clearUPDebt"
      | "controllerAddress"
      | "decimals"
      | "decreaseAllowance"
      | "getNativeTotal"
      | "getRedeemValue"
      | "getTotalFeesGiven"
      | "getTotalUPBurnt"
      | "getVirtualPrice"
      | "getVirtualPriceForMinting"
      | "increaseAllowance"
      | "isMinter"
      | "isOwner"
      | "justBurn"
      | "justDeposit"
      | "mint"
      | "name"
      | "nativedBorrowed"
      | "renounceMinter"
      | "renounceOwnership"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferMulti"
      | "transferOtherTokens"
      | "transferOwnership"
      | "upBorrowed"
      | "updateControllerAddress"
      | "updateMintRate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowUP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearNativeDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearUPDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFeesGiven",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUPBurnt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualPriceForMinting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "justBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "justDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativedBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMulti",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOtherTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateControllerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowUP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearNativeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearUPDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFeesGiven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUPBurnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualPriceForMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "justBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "justDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativedBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOtherTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upBorrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintRate",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BorrowNative(uint256)": EventFragment;
    "BorrowUP(uint256)": EventFragment;
    "ClearNativeDebt(uint256)": EventFragment;
    "ClearUPDebt(uint256)": EventFragment;
    "JustDeposit(address,uint256)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "OwnerRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateControllerAddress(address)": EventFragment;
    "UpdateMintRate(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowUP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearNativeDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearUPDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JustDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateControllerAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMintRate"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowNativeEventObject {
  _amount: BigNumber;
}
export type BorrowNativeEvent = TypedEvent<
  [BigNumber],
  BorrowNativeEventObject
>;

export type BorrowNativeEventFilter = TypedEventFilter<BorrowNativeEvent>;

export interface BorrowUPEventObject {
  _amount: BigNumber;
}
export type BorrowUPEvent = TypedEvent<[BigNumber], BorrowUPEventObject>;

export type BorrowUPEventFilter = TypedEventFilter<BorrowUPEvent>;

export interface ClearNativeDebtEventObject {
  amount: BigNumber;
}
export type ClearNativeDebtEvent = TypedEvent<
  [BigNumber],
  ClearNativeDebtEventObject
>;

export type ClearNativeDebtEventFilter = TypedEventFilter<ClearNativeDebtEvent>;

export interface ClearUPDebtEventObject {
  amount: BigNumber;
}
export type ClearUPDebtEvent = TypedEvent<[BigNumber], ClearUPDebtEventObject>;

export type ClearUPDebtEventFilter = TypedEventFilter<ClearUPDebtEvent>;

export interface JustDepositEventObject {
  owner: string;
  value: BigNumber;
}
export type JustDepositEvent = TypedEvent<
  [string, BigNumber],
  JustDepositEventObject
>;

export type JustDepositEventFilter = TypedEventFilter<JustDepositEvent>;

export interface MinterAddedEventObject {
  account: string;
}
export type MinterAddedEvent = TypedEvent<[string], MinterAddedEventObject>;

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>;

export interface MinterRemovedEventObject {
  account: string;
}
export type MinterRemovedEvent = TypedEvent<[string], MinterRemovedEventObject>;

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>;

export interface OwnerRemovedEventObject {
  account: string;
}
export type OwnerRemovedEvent = TypedEvent<[string], OwnerRemovedEventObject>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousAccount: string;
  newAccount: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateControllerAddressEventObject {
  _newController: string;
}
export type UpdateControllerAddressEvent = TypedEvent<
  [string],
  UpdateControllerAddressEventObject
>;

export type UpdateControllerAddressEventFilter =
  TypedEventFilter<UpdateControllerAddressEvent>;

export interface UpdateMintRateEventObject {
  _amount: BigNumber;
}
export type UpdateMintRateEvent = TypedEvent<
  [BigNumber],
  UpdateMintRateEventObject
>;

export type UpdateMintRateEventFilter = TypedEventFilter<UpdateMintRateEvent>;

export interface UPv2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UPv2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowNative(
      _borrowNativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowUP(
      _borrowUPAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearNativeDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearUPDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controllerAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNativeTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedeemValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalFeesGiven(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUPBurnt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVirtualPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVirtualPriceForMinting(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    justBurn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    justDeposit(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nativedBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferMulti(
      to: string[],
      value: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOtherTokens(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateControllerAddress(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintRate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMinter(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowNative(
    _borrowNativeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowUP(
    _borrowUPAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    from: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearNativeDebt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearUPDebt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controllerAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNativeTotal(overrides?: CallOverrides): Promise<BigNumber>;

  getRedeemValue(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalFeesGiven(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUPBurnt(overrides?: CallOverrides): Promise<BigNumber>;

  getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getVirtualPriceForMinting(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  justBurn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  justDeposit(
    value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nativedBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  renounceMinter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferMulti(
    to: string[],
    value: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOtherTokens(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  updateControllerAddress(
    _newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintRate(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMinter(account: string, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowNative(
      _borrowNativeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowUP(
      _borrowUPAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearNativeDebt(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearUPDebt(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    controllerAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNativeTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemValue(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFeesGiven(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUPBurnt(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPriceForMinting(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    justBurn(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    justDeposit(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nativedBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceMinter(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferMulti(
      to: string[],
      value: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOtherTokens(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    updateControllerAddress(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintRate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BorrowNative(uint256)"(_amount?: null): BorrowNativeEventFilter;
    BorrowNative(_amount?: null): BorrowNativeEventFilter;

    "BorrowUP(uint256)"(_amount?: null): BorrowUPEventFilter;
    BorrowUP(_amount?: null): BorrowUPEventFilter;

    "ClearNativeDebt(uint256)"(amount?: null): ClearNativeDebtEventFilter;
    ClearNativeDebt(amount?: null): ClearNativeDebtEventFilter;

    "ClearUPDebt(uint256)"(amount?: null): ClearUPDebtEventFilter;
    ClearUPDebt(amount?: null): ClearUPDebtEventFilter;

    "JustDeposit(address,uint256)"(
      owner?: string | null,
      value?: null
    ): JustDepositEventFilter;
    JustDeposit(owner?: string | null, value?: null): JustDepositEventFilter;

    "MinterAdded(address)"(account?: string | null): MinterAddedEventFilter;
    MinterAdded(account?: string | null): MinterAddedEventFilter;

    "MinterRemoved(address)"(account?: string | null): MinterRemovedEventFilter;
    MinterRemoved(account?: string | null): MinterRemovedEventFilter;

    "OwnerRemoved(address)"(account?: string | null): OwnerRemovedEventFilter;
    OwnerRemoved(account?: string | null): OwnerRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousAccount?: string | null,
      newAccount?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousAccount?: string | null,
      newAccount?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateControllerAddress(address)"(
      _newController?: null
    ): UpdateControllerAddressEventFilter;
    UpdateControllerAddress(
      _newController?: null
    ): UpdateControllerAddressEventFilter;

    "UpdateMintRate(uint256)"(_amount?: null): UpdateMintRateEventFilter;
    UpdateMintRate(_amount?: null): UpdateMintRateEventFilter;
  };

  estimateGas: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowNative(
      _borrowNativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowUP(
      _borrowUPAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearNativeDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearUPDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controllerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNativeTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemValue(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFeesGiven(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUPBurnt(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPriceForMinting(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    justBurn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    justDeposit(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nativedBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferMulti(
      to: string[],
      value: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOtherTokens(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    updateControllerAddress(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintRate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinter(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowNative(
      _borrowNativeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowUP(
      _borrowUPAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearNativeDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearUPDebt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controllerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNativeTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalFeesGiven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalUPBurnt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtualPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtualPriceForMinting(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    justBurn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    justDeposit(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativedBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferMulti(
      to: string[],
      value: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOtherTokens(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateControllerAddress(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintRate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
